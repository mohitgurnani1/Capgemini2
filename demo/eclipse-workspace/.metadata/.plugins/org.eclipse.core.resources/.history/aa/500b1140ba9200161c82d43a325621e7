package com.flp.ems.dao;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import com.flp.ems.domain.Department;
import com.flp.ems.domain.Employee;
import com.flp.ems.domain.Project;
import com.flp.ems.domain.Role;

//@Repository
public class EmployeeDaoImplForDBUsingJDBCTemplate implements IEmployeeDao {

	
	DataSource datasource;

	private JdbcTemplate jdbcTemplate;
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	Properties prop;
	Connection conn;
	
	@Autowired
	public EmployeeDaoImplForDBUsingJDBCTemplate(DataSource datasource)  {
		this.datasource = datasource;
		this.jdbcTemplate = new JdbcTemplate(datasource);
		this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(datasource);
		prop=new Properties();
		try
		{
		//prop.load(new FileInputStream("D:/git/Capgemini/demo/eclipse-workspace/EMS[Phase-3]/properties/dbDetails.properties"));
		prop.load(this.getClass().getClassLoader().getResourceAsStream("dbDetails.properties"));
		
		/*Class.forName(prop.getProperty("jdbc.driver"));
		String url=prop.getProperty("jdbc.url");
		String uname=prop.getProperty("jdbc.username");
		String pwd=prop.getProperty("jdbc.password");
		conn=DriverManager.getConnection(url);
		*/}
		catch(Exception e){
			e.printStackTrace();
		}
 }
 
 
 
	@Override
	public void AddEmployee(Employee emp) {
		
		String sql=prop.getProperty("jdbc.query.insertEmployee");
		BeanPropertySqlParameterSource sqlParameterSource;
		sqlParameterSource = new BeanPropertySqlParameterSource(emp);
		namedParameterJdbcTemplate.update(sql, sqlParameterSource);	
		/*try(PreparedStatement ps=conn.prepareStatement(sql);){
		
			ps.setString(1, emp.getEmpId());
			ps.setString(2, emp.getName());
			ps.setString(3, emp.getKinId());
			ps.setString(4, emp.getEmailId());
			ps.setString(5, emp.getPhoneNo());
			long p1=emp.getDob().getTime();
			long p2=emp.getDoj().getTime();
			ps.setDate(6,  new Date(p1));
			ps.setDate(7, new Date(p2));
			ps.setString(8, emp.getAddress());
			ps.setString(9,emp.getDepid());
			ps.setString(10, emp.getProjid());
			ps.setString(11, emp.getRoleid());
			
			System.out.println("Rows affected "+ps.executeUpdate());
		
		} catch (SQLException e) {
			e.printStackTrace();
		}*/
		
	}

	@Override
	public boolean ModifyEmployee(Employee emp) {
	
		
		String sql=prop.getProperty("jdbc.query.modifyEmployee");
		BeanPropertySqlParameterSource sqlParameterSource;
		sqlParameterSource = new BeanPropertySqlParameterSource(emp);
		namedParameterJdbcTemplate.update(sql, sqlParameterSource);	
		String sql2=prop.getProperty("jdbc.query.insertEmployee");
		namedParameterJdbcTemplate.update(sql2, sqlParameterSource);	
		return 	namedParameterJdbcTemplate.update(sql2, sqlParameterSource)==1;	
	}

	@Override
	public boolean RemoveEmployee(String key, String value) {
		String sql=prop.getProperty("jdbc.query.removeEmployee");
		Map<String,String> map=new HashMap<String,String>();
		map.put("key", key);
		map.put("value", value);
		return namedParameterJdbcTemplate.update(sql, map)==1;	
	
		
	/*	
		//sql.indexOf('?')
		try(PreparedStatement ps=conn.prepareStatement(sql);){
				
			
				ps.setString(1, key);
				ps.setString(2, value);
				result=ps.executeUpdate();
				//System.out.println(ps.toString());
				System.out.println("Rows affected "+result);
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	*/	}

	@Override
	public Employee SearchEmployee(HashMap<String, String> emp) {
		Employee temp=null;
		int result=0;
		String sql="Select * from employee where ";
		
				
			Set set=emp.entrySet();
			int i=0;
			for(Object o:set)
			{
				i++;
				Map.Entry<String, String> m=(Map.Entry<String, String>)o;
				if(i==set.size())
					sql+=m.getKey()+"='"+m.getValue()+"'";
				else	
					sql+=m.getKey()+"='"+m.getValue()+"' or ";
				
			}
	
			
			Employee employee = (Employee)jdbcTemplate.queryForObject(
					sql, new BeanPropertyRowMapper<Employee>(Employee.class));

		//	List<Employee> employee  = jdbcTemplate.query(sql,new BeanPropertyRowMapper(Employee.class));

	//return employee.get(0);	
return employee;
	
	}

	@Override
	public ArrayList<Employee> getAllEmployee() {
//	ArrayList<Employee> empList=new ArrayList<Employee>();

	String selectSQL = prop.getProperty("jdbc.query.SAE");
	
	List<Employee> employee  = jdbcTemplate.query(selectSQL,new BeanPropertyRowMapper<Employee>(Employee.class));

	
	/*try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		
	ResultSet rs = preparedStatement.executeQuery();

	while (rs.next()) 
		empList.add(new Employee(rs.getString("empId"), rs.getString("name"), rs.getString("kinId"),rs.getString("emailId"),rs.getString("phone"),rs.getString("address"),rs.getDate("dob"),rs.getDate("doj"),rs.getString("deptId"),rs.getString("projId"),rs.getString("roleId")));
	
	} catch (SQLException e) {
		e.printStackTrace();
	}
		return empList;
*/
	System.out.println(employee.size());
	
	
	return new ArrayList<Employee>(employee);
	}

	public ArrayList<Department> getDepartmentList() {
		
		
		
		
		//ArrayList<Department> deptList=new ArrayList<Department>();
		String selectSQL = prop.getProperty("jdbc.query.SAD");
	
		List<Department> deptList  = jdbcTemplate.query(selectSQL,new BeanPropertyRowMapper<Department>(Department.class));

		
		
/*		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		
		ResultSet rs = preparedStatement.executeQuery();
	
		while (rs.next()) 
			deptList.add(new Department(rs.getString("deptId"), rs.getString("name"), rs.getString("description")));
		
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
*/		
		
		
		return new ArrayList<Department>(deptList);
	}

	public Department getDeptById(String deptid){
		//Department dept=null;
		String selectSQL = prop.getProperty("jdbc.query.SD");
		
	
		Department dept = (Department)jdbcTemplate.queryForObject(
				selectSQL, new Object[] { deptid },new BeanPropertyRowMapper<Department>(Department.class));
		System.out.println(dept.getName());

		/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, deptid);
			
		ResultSet rs = preparedStatement.executeQuery( );
	
		if (rs.next()) 
			dept=new Department(rs.getString("deptId"), rs.getString("name"), rs.getString("description"));
		
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	*/	return dept;
		}
	
	public Role getRoleById(String roleId){
		
	//	Role role=null;
		String selectSQL = prop.getProperty("jdbc.query.SR");
		
		
		Role role = (Role)jdbcTemplate.queryForObject(
				selectSQL, new Object[] { roleId },new BeanPropertyRowMapper<Role>(Role.class));
/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, roleId);
			
		ResultSet rs = preparedStatement.executeQuery( );
	
		if (rs.next()) 
			role=new Role(rs.getString("roleId"), rs.getString("name"), rs.getString("description"));
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
*/		return role;

	}
		
	public Project getProjectById(String projId){
	//	Project proj=null;
		String selectSQL = prop.getProperty("jdbc.query.SP");
		
		
		Project proj = (Project)jdbcTemplate.queryForObject(
				selectSQL, new Object[] { projId },new BeanPropertyRowMapper<Project>(Project.class));
		
		/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, projId);
			
		ResultSet rs = preparedStatement.executeQuery();
	
		if (rs.next()) 
		{	
			proj=new Project(rs.getString("projId"), rs.getString("name"), rs.getString("description"),rs.getString("deptId"));
		}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	*/	return proj;
		}
	
	public ArrayList<Project> getProjectList(String deptid) {
	//	ArrayList<Project> temp=new ArrayList<Project>();
		String selectSQL = prop.getProperty("jdbc.query.SAP");
	
		List<Project> projectList  = jdbcTemplate.query(selectSQL,new Object[] { deptid },new BeanPropertyRowMapper<Project>(Project.class));

		/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, deptid);
			
		ResultSet rs = preparedStatement.executeQuery ();
	
		while (rs.next()) 
		{	
			temp.add(new Project(rs.getString("projId"), rs.getString("name"), rs.getString("description"),deptid));
		
		}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	*/
		return new ArrayList(projectList);
	}

	public ArrayList<Role> getRoleList() {
	
		
//		ArrayList<Role> role=new ArrayList<Role>();
		String selectSQL = prop.getProperty("jdbc.query.SAR");
		
		List<Role> roleList  = jdbcTemplate.query(selectSQL,new BeanPropertyRowMapper<Role>(Role.class));

		/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
			
		ResultSet rs = preparedStatement.executeQuery( );
	
		while (rs.next()) 
			role.add(new Role(rs.getString("roleId"), rs.getString("name"), rs.getString("description")));
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
*/
		return new ArrayList(roleList);	
	}

	public Employee getEmployeeByEmailId(String emailId) {
		
		//Employee emp=null;
		String selectSQL = prop.getProperty("jdbc.query.SE");
		
		
		Employee emp = (Employee)jdbcTemplate.queryForObject(
				selectSQL, new Object[] { emailId },new BeanPropertyRowMapper<Employee>(Employee.class));
		
		
		
		/*
		try(PreparedStatement preparedStatement = conn.prepareStatement(selectSQL);){
		preparedStatement.setString(1, emailId);
			
		ResultSet rs = preparedStatement.executeQuery( );
	
		if (rs.next()) 
			emp=new Employee(rs.getString("empId"), rs.getString("name"), rs.getString("kinId"),rs.getString("emailId"),rs.getString("phone"),rs.getString("address"),rs.getDate("dob"),rs.getDate("doj"),rs.getString("deptId"),rs.getString("projId"),rs.getString("roleId"));
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	*/	return emp;

	
	}

	public boolean RemoveEmployeeByKinId(String value) {
	//	int result=0;
		String sql=prop.getProperty("jdbc.query.removeEmployeeKin");
	
		
		
		//sql.indexOf('?')
	/*	try(PreparedStatement ps=conn.prepareStatement(sql);){
				
				ps.setString(1, value);
				result=ps.executeUpdate();
			//	System.out.println(ps.toString());
				System.out.println("Rows affected "+result);
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	*/return jdbcTemplate.update(sql,value)==1;	
	}

	public boolean RemoveEmployeeByName(String value) {
	//	int result=0;
		String sql=prop.getProperty("jdbc.query.removeEmployeeName");
		//sql.indexOf('?')
		/*try(PreparedStatement ps=conn.prepareStatement(sql);){
			
				ps.setString(1, value);
				result=ps.executeUpdate();
				//System.out.println(ps.toString());
				System.out.println("Rows affected "+result);
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	return result==1;	
*/
		return jdbcTemplate.update(sql,value)==1;	
}

	public boolean RemoveEmployeeByEmailId(String value) {
//		int result=0;
		String sql=prop.getProperty("jdbc.query.removeEmployeeEmail");
/*		//sql.indexOf('?')
		try(PreparedStatement ps=conn.prepareStatement(sql);){
				ps.setString(1, value);
				result=ps.executeUpdate();
			//	System.out.println(ps.toString());
				System.out.println("Rows affected "+result);
			} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	return result==1;	
*/	return jdbcTemplate.update(sql,value)==1;	

	}

}
